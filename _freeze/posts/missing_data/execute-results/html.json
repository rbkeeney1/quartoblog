{
  "hash": "bbecd169ee7b9a08e08d5295f5dbb213",
  "result": {
    "markdown": "---\ntitle: \"Missing Data\"\nauthor: \"Ryan Keeney\"\neditor: visual\nexecute:\n  freeze: auto\n---\n\n\n# Introduction\n\nIn this post, we will review types of missing data and methods for dealing with missing data. Data is often missing, wrong, and generally just has a lot of problems.\n\n-   Measurement gauges break down\n\n-   Recording errors occur during transmission, data entry, and storage.\n\n-   Human interaction causes a variety of challenges such as incorrect inputs, withheld or unavailable data, or medical history.\n\n> *This post does not deal with censored data. Censored data occurs when an data point has not yet been observed. For example, if you are studying a components reliability, it may be unrealistic to run all the components to failure. If a test is suspended without the component failing, then it's actual failure point is censored - you only know the lower-bound of the components life-time. Bayesian approaches are particularly effective when censored data occurs in time-to-event applications such as reliability theory, survival theory (healthcare outcomes), and geoscientific predictions (when will Mount Rainier erupt next?).*\n\n## Types of missing data\n\n**Missing Completely At Random (MCAR)**: Missingness does not depend on observed or unobserved data. There is no systematic differences between what is observed and what is not.\n\n-   Easy to deal with\n\n-   Ignorable missingness\n\n**Missing At Random (MAR)**: Missingness depends only on the observed data. MAR occurs when the missingness is **not** random - there are systematic differences between what is observed and what is not - but where missingness can be fully accounted for by variables where there is complete information.\n\n-   Easy to deal with\n\n-   Ignorable missingness\n\nThe missing data correlated to other data in the data set. For example, perhaps it's dangerous (to us) to measure the bills of large and aggressive penguins, so that variable may be missing or inaccurately measured for those types of penguins.\n\n**Missing Not At Random (MNAR)**: Neither MCAR, nor MAR hold; missingness may depend on the data that is missing - there are systematic differences between what is observed and what is not - and the causes are not accounted for. Usually, MNAR indicates that the situations at which missingness occurs depends on hidden or unobserved causes. This is the most dangerous and difficult type of missingness.\n\n-   Difficult to deal with\n\n-   Non-ignorable missingness\n\nWhen the data is Missing Not At Random (MNAR), which missing values may depend on other factors such as data collection design, reporting biases, selection biases.\n\n## Patterns in missing data\n\nSome factors that are more likely to be missing (e.g. due to difficulty of collection, or isn't standard to be collected).\n\nOther factor types are more likely to be missing as well for more complex reasons (e.g. bias for or not providing income levels, a radar gun used for speeds outside its operating range, death date won't be recorded for living patients). This results in bias, and must be accounted for differently.\n\n# Methods for handling missing data\n\nIdeally, missing data has been discussed, planned for, and negated *well in advance* of the modeling stage. However, missing data is a reality for data scientists even in the best situations. We'll be covering three common methods for handling missing data, discuss their pros and cos, and demo them in R.\n\n1.  Omit missing data\n2.  Use categorical variables to indicate missing data\n3.  Estimate (impute) missing data\n\n### Example: Loading and Preparing Data\n\nI'll be using the [recipe](https://www.tidymodels.org/start/recipes/) library from [tidymodels](https://www.tidymodels.org/), which was previously discussed [here](https://rbkeeney1.github.io/quartoblog/posts/tidymodels_recipes.html), and the [palmerpenguins](https://allisonhorst.github.io/palmerpenguins/) data as our example data.\n\nFirst, let's load the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# libraries\nlibrary(palmerpenguins) # data, loads into 'penguins' and 'penguins_raw'\nlibrary(tidymodels) # preprocessing recipes and other tools\n```\n:::\n\n\nThe data contain information for 344 penguins. There are 3 different species of penguins, collected from 3 islands in the Palmer Archipelago, Antarctica. It includes size measurements for adult foraging penguins near Palmer Station, Antarctica.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# features available\npenguins |> str()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [344 x 7] (S3: tbl_df/tbl/data.frame)\n $ species          : Factor w/ 3 levels \"Adelie\",\"Chinstrap\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ island           : Factor w/ 3 levels \"Biscoe\",\"Dream\",..: 3 3 3 3 3 3 3 3 3 3 ...\n $ bill_length_mm   : num [1:344] 39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...\n $ bill_depth_mm    : num [1:344] 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ...\n $ flipper_length_mm: int [1:344] 181 186 195 NA 193 190 181 195 193 190 ...\n $ body_mass_g      : int [1:344] 3750 3800 3250 NA 3450 3650 3625 4675 3475 4250 ...\n $ sex              : Factor w/ 2 levels \"female\",\"male\": 2 1 1 NA 1 2 1 2 NA NA ...\n```\n:::\n:::\n\n\nThe data contains 333 complete cases, with 19 missing values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# count NA by variable\ncolSums(is.na(penguins))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          species            island    bill_length_mm     bill_depth_mm \n                0                 0                 2                 2 \nflipper_length_mm       body_mass_g               sex \n                2                 2                11 \n```\n:::\n:::\n\n\nSince I want full control over the data, I'm going to omit the 19 missing values, split the data into test and training sets, then intentionally set up multiple missing data scenarios for comparison.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# remove NAs from penguins\ndata <- penguins |> na.omit()\n\n# Put 3/4 of the data into the training set \ndata_split <- initial_split(data, prop = 3/4, strata = species)\n\n# Create data frames for the two sets\ndata_train <- training(data_split)\ndata_test  <- testing(data_split)\n```\n:::\n\n\nscenario\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# no missing\ndata_train_full <- data_train\n\n# missing data\ndata_train_missing <- data_train\n\n# randomly drop 20% of island\ndata_train_missing$island[sample(1:nrow(data_train_missing), 49)] <- NA\n\n# randomly drop 10% of bill length and depth\ndata_train_missing$bill_length_mm[sample(1:nrow(data_train_missing), 24)] <- NA\ndata_train_missing$bill_depth_mm[sample(1:nrow(data_train_missing), 24)] <- NA\n\n# randomly drop 5% of all others\ndata_train_missing$flipper_length_mm[sample(1:nrow(data_train_missing), 12)] <- NA\ndata_train_missing$body_mass_g[sample(1:nrow(data_train_missing), 12)] <- NA\ndata_train_missing$sex[sample(1:nrow(data_train_missing), 12)] <- NA\n\n# check\ncolSums(is.na(data_train_missing))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          species            island    bill_length_mm     bill_depth_mm \n                0                49                24                24 \nflipper_length_mm       body_mass_g               sex \n               12                12                12 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# set up base recipe\nrec_base <- recipe(species~., data=data_train_missing)\n```\n:::\n\n\n## Omit missing data\n\nThe first option is to simply omit or discard the missing data. That's easy to implement and doesn't potentially induce errors. However, you have to weight this against the risk of losing too many data points - many large data have hundreds or thousands of variables, if you removed any data point with a missing variables you could eliminate practically the entire data. Additionally, simply removing data creates the potential for for censored or biased missing data.\n\n### Example: Omit\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec_omit <- rec_base |> \n  step_naomit(all_predictors()) |> \n  prep(data_train_missing)\n\n# apply to missing data\ndata_omit <- bake(rec_omit, new_data=NULL) \n\n# we lose about 100 data points if we choose to omit all the missing data!\ndata_omit |> nrow()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 145\n```\n:::\n\n```{.r .cell-code}\ndata_train_full |> nrow()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 249\n```\n:::\n:::\n\n\n## Use categorical variables to indicate missing data\n\nThe missing data can be biased! To account for that we can include interactions.\n\nIf we include interaction terms between the new categorical variable and all other variables, then essentially we're creating two separate models. One for when there's missing data in this variable and one for when there isn't. So it's really like a tree model with a single branch.\n\n### Example: Categorical value\n\nHere, I build a categorical missing value for island.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec_cat <- rec_base |> \n  # convert to character (easier)\n  step_mutate(island = as.character(island)) |>\n  # Change NA -> \"Missing\"\n  step_mutate(island = ifelse(is.na(island),'Missing',island)) |>\n  # covert back to factor\n  step_mutate(island = as.factor(island)) |>\n  # dummy step with one hot encoding\n  step_dummy(island,one_hot = TRUE) |> \n  # set interaction term between the missing island category and all other vars\n  step_interact(terms = ~island_Missing:all_predictors()) |> \n  # train\n  prep(data_train_missing)\n\n# apply to missing data\ndata_cat <- bake(rec_cat, new_data=NULL)\n\n# these are the new variables for the model\ndata_cat |> names()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"bill_length_mm\"                     \"bill_depth_mm\"                     \n [3] \"flipper_length_mm\"                  \"body_mass_g\"                       \n [5] \"sex\"                                \"species\"                           \n [7] \"island_Biscoe\"                      \"island_Dream\"                      \n [9] \"island_Missing\"                     \"island_Torgersen\"                  \n[11] \"island_Missing_x_bill_length_mm\"    \"island_Missing_x_bill_depth_mm\"    \n[13] \"island_Missing_x_flipper_length_mm\" \"island_Missing_x_body_mass_g\"      \n[15] \"island_Missing_x_sexmale\"           \"island_Missing_x_island_Biscoe\"    \n[17] \"island_Missing_x_island_Dream\"      \"island_Missing_x_island_Torgersen\" \n```\n:::\n:::\n\n\n### Example: Categorical value for numeric data\n\nFor numerical values, set NA = 0 and then add in a missing column. In this example, I create a missing term for bill length, then create the required interaction terms.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec_cat_num <- rec_base |> \n  # set up missing category\n  step_mutate(bill_length_missing = ifelse(is.na(bill_length_mm),'Yes','No')) |>\n  # set bill length -> 0 if NA\n  step_mutate(bill_length_mm = ifelse(is.na(bill_length_mm),0,bill_length_mm)) |>\n  # convert the missing category to a factor\n  step_mutate(bill_length_missing = as.factor(bill_length_missing)) |> \n  # dummy step with one hot encoding\n  step_dummy(bill_length_missing,one_hot = TRUE) |> \n  # set interaction term between the missing  category and all other vars\n  step_interact(terms = ~bill_length_missing_Yes:all_predictors()) |> \n  # train\n  prep(data_train_missing)\n\n# apply to missing data\ndata_cat_num <- bake(rec_cat_num, new_data=NULL)\n\n# these are the new variables for the model\ndata_cat_num |> names()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"island\"                                          \n [2] \"bill_length_mm\"                                  \n [3] \"bill_depth_mm\"                                   \n [4] \"flipper_length_mm\"                               \n [5] \"body_mass_g\"                                     \n [6] \"sex\"                                             \n [7] \"species\"                                         \n [8] \"bill_length_missing_No\"                          \n [9] \"bill_length_missing_Yes\"                         \n[10] \"bill_length_missing_Yes_x_islandDream\"           \n[11] \"bill_length_missing_Yes_x_islandTorgersen\"       \n[12] \"bill_length_missing_Yes_x_bill_length_mm\"        \n[13] \"bill_length_missing_Yes_x_bill_depth_mm\"         \n[14] \"bill_length_missing_Yes_x_flipper_length_mm\"     \n[15] \"bill_length_missing_Yes_x_body_mass_g\"           \n[16] \"bill_length_missing_Yes_x_sexmale\"               \n[17] \"bill_length_missing_Yes_x_bill_length_missing_No\"\n```\n:::\n:::\n\n\n## Estimate missing data\n\n### General guidelines for imputation\n\n-   Data is used twice, so it can lead to over-fitting\n\n-   Limit the amount of imputation to no more than 5% per factor\n\n-   If more than 5% is missing, use omission or categorical value methods\n\n### Approaches to imputation\n\n-   **Mid-range value**: use mean, median (numeric), or mode (categorical)\n\n-   **Regression**: Reduce or eliminate the problem of bias by using other factors to predict the missing value. Essentially, build a model for each factor.\n\n-   **Perturbation**: Accounts for bias and variability. Essentially, add perturbation to each imputed variable (e.g. adjust up/down a random amount from the normally distributed variation).\n\n+-----------------+---------------------------------------------+------------------------------------------------------------------------------------------------------------------------------+\n| Method          | Pro                                         | Con                                                                                                                          |\n+=================+=============================================+==============================================================================================================================+\n| Mid-range value | -   Hedge against being too wrong           | -   Biased imputation (e.g. if high-income people are less likely to answer the mean/median will be underestimate the value) |\n|                 | -   Easy to compute                         |                                                                                                                              |\n+-----------------+---------------------------------------------+------------------------------------------------------------------------------------------------------------------------------+\n| Regression      | -   Reduce or eliminate the problem of bias | -   Complex to build, fit, validate, and test additional models                                                              |\n|                 |                                             |                                                                                                                              |\n|                 |                                             | -   Does not capture all the variability                                                                                     |\n|                 |                                             |                                                                                                                              |\n|                 |                                             | -   Uses the data twice, so it could over-fit                                                                                |\n+-----------------+---------------------------------------------+------------------------------------------------------------------------------------------------------------------------------+\n| Perturbation    | -   More accurate variability               | -   Less accurate on average                                                                                                 |\n+-----------------+---------------------------------------------+------------------------------------------------------------------------------------------------------------------------------+\n\n**Do we add additional error from imputation and perturbation?**\n\nYup! `Total error = Imputation error + perturbation error + model error`. However, regular data almost certainly has errors as well. It's up to you as the data scientist to decide what trade-offs to make in a given situation.\n\nThere are many approaches to imputation. For example, advanced methods like multivariate imputation by chained equations (MICE) can impute multiple factor values together.\n\n### Example: Estimation (Imputation)\n\nLet's estimate a few of the numerical values with different methods. [Permutation sampling](https://rsample.tidymodels.org/reference/permutations.html) is covered in `rsample`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec_impute <- rec_base |> \n  # impute bill length and depth with mean\n  step_impute_mean(bill_length_mm,bill_depth_mm,flipper_length_mm) |> \n  # impute sex with mode\n  step_impute_mode(sex) |> \n  # impute body mass with linear model mass ~ sex + bill_length_mm +bill_depth_mm\n  step_impute_linear(body_mass_g, impute_with = imp_vars(sex,bill_length_mm,bill_depth_mm)) |> \n  # impute island with knn\n  step_impute_knn(island, neighbors = 5) |> \n  # train\n  prep(data_train_missing)\n  \n# apply to missing data\ndata_impute <- bake(rec_impute, new_data=NULL)\n\n# check\ncolSums(is.na(data_impute))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           island    bill_length_mm     bill_depth_mm flipper_length_mm \n                0                 0                 0                 0 \n      body_mass_g               sex           species \n                0                 0                 0 \n```\n:::\n:::\n\n\n# Summarizing Methods\n\n+-------------------+-----------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------+\n| Method            | Pro                                     | Con                                                                                                                                            |\n+===================+=========================================+================================================================================================================================================+\n| Discard           | -   Not potentially introducing errors  | -   Don't want to lose to many data points                                                                                                     |\n|                   |                                         |                                                                                                                                                |\n|                   | -   Easy to implement                   | -   Potential for censored or biased missing data                                                                                              |\n+-------------------+-----------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------+\n| Categorical Value | -   Works well if factor is categorical | -   Difficult for continuous data, but could set to zero an add a new factor to show if it's missing or not.                                   |\n|                   |                                         |                                                                                                                                                |\n|                   |                                         | -   Potential for censored or biased missing data (coefficients of other variables are pulled up/down to try and account for the missing data) |\n+-------------------+-----------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------+\n| Estimate (Impute) | -   Reduces bias                        | -   Data is used twice, so it can lead to over-fitting                                                                                         |\n|                   |                                         |                                                                                                                                                |\n|                   |                                         | -   Limit to 5% per factor                                                                                                                     |\n|                   |                                         |                                                                                                                                                |\n|                   |                                         | -   Per data point, limit to 5% or use omission or categorical variable.                                                                       |\n+-------------------+-----------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------+\n\n# Citations\n\nHorst AM, Hill AP, Gorman KB (2020). palmerpenguins: Palmer Archipelago (Antarctica) penguin data. R package version 0.1.0. https://allisonhorst.github.io/palmerpenguins/. doi: 10.5281/zenodo.3960218.\n",
    "supporting": [
      "missing_data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}